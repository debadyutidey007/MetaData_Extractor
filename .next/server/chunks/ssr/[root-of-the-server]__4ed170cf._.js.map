{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/MetaData_Extractor/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/MetaData_Extractor/src/ai/flows/face-verification.ts"],"sourcesContent":["\r\n'use server';\r\n/**\r\n * @fileOverview A mock face verification flow for demonstration purposes.\r\n *\r\n * - verifyFace - Compares a new face image with a registered one.\r\n * - VerifyFaceInput - Input type for the flow.\r\n * - VerifyFaceOutput - Output type for the flow.\r\n */\r\n\r\nimport { ai } from '@/ai/genkit';\r\nimport { z } from 'genkit';\r\n\r\nconst VerifyFaceInputSchema = z.object({\r\n  userId: z.string().describe('The unique ID of the user to verify.'),\r\n  faceImageDataUri: z\r\n    .string()\r\n    .describe(\"A data URI of the user's face to verify. Expected format: 'data:image/jpeg;base64,...'.\"),\r\n});\r\nexport type VerifyFaceInput = z.infer<typeof VerifyFaceInputSchema>;\r\n\r\nconst VerifyFaceOutputSchema = z.object({\r\n  isVerified: z.boolean().describe('Whether the face was successfully verified.'),\r\n});\r\nexport type VerifyFaceOutput = z.infer<typeof VerifyFaceOutputSchema>;\r\n\r\nexport async function verifyFace(input: VerifyFaceInput): Promise<VerifyFaceOutput> {\r\n  return verifyFaceFlow(input);\r\n}\r\n\r\nconst verifyFaceFlow = ai.defineFlow(\r\n  {\r\n    name: 'verifyFaceFlow',\r\n    inputSchema: VerifyFaceInputSchema,\r\n    outputSchema: VerifyFaceOutputSchema,\r\n  },\r\n  async ({ userId, faceImageDataUri }) => {\r\n    // IMPORTANT: This is a mock verification flow for demonstration purposes.\r\n    // In a real application, you would use a dedicated face recognition service.\r\n    // Calling a generative model for biometric verification is not recommended.\r\n    // This flow simulates a successful verification without actual database checks.\r\n    \r\n    console.log(`Simulating face verification for user ${userId}. In a real app, you would use a computer vision model to compare the new image with a stored one.`);\r\n\r\n    return {\r\n      isVerified: true,\r\n    };\r\n  }\r\n);"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,kBAAkB,uIAAA,CAAA,IAAC,CAChB,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,YAAY,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,WAAW,KAAsB;IACrD,OAAO,eAAe;AACxB;AAEA,MAAM,iBAAiB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO,EAAE,MAAM,EAAE,gBAAgB,EAAE;IACjC,0EAA0E;IAC1E,6EAA6E;IAC7E,4EAA4E;IAC5E,gFAAgF;IAEhF,QAAQ,GAAG,CAAC,CAAC,sCAAsC,EAAE,OAAO,kGAAkG,CAAC;IAE/J,OAAO;QACL,YAAY;IACd;AACF;;;IArBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/MetaData_Extractor/.next-internal/server/app/login/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {verifyFace as '4039682948a5c6641bbcd3b3795dab9a5f317fd9f7'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/MetaData_Extractor/src/app/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/login/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/login/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/debad/Desktop/MetaData_Extractor/src/app/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/login/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/login/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsQ,GACnS,oCACA","debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}